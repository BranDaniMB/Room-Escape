/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.rooms;

import files.PropertiesConfig;
import java.awt.Graphics;
import java.awt.Image;
import static java.lang.Thread.sleep;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JPanel;

/**
 *
 * @author Jermy
 */
public class Room1 extends javax.swing.JFrame {

    /**
     * Creates new form Room1
     */
    public Room1() {
        initComponents();
        new Chrono().start();
        background();
    }

    public void background() {
        ImageIcon image = new ImageIcon(getClass().getResource("/images/room_1.jpg"));
        Icon icon = new ImageIcon(image.getImage().getScaledInstance(background.getWidth(), background.getHeight(), Image.SCALE_AREA_AVERAGING));
        background.setIcon(icon);
        ImageIcon imagePadlock = new ImageIcon(getClass().getResource("/images/padlock.png"));
        Icon iconPadlock = new ImageIcon(imagePadlock.getImage().getScaledInstance(padlock1.getWidth(), padlock1.getHeight(), Image.SCALE_AREA_AVERAGING));
        padlock1.setIcon(iconPadlock);
        padlock2.setIcon(iconPadlock);
        padlock3.setIcon(iconPadlock);
        padlock4.setIcon(iconPadlock);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chrono = new javax.swing.JLabel();
        padlock1 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        padlock2 = new javax.swing.JButton();
        padlock3 = new javax.swing.JButton();
        padlock4 = new javax.swing.JButton();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setIconImages(null);
        setMinimumSize(new java.awt.Dimension(700, 500));

        chrono.setBackground(new java.awt.Color(255, 255, 255));
        chrono.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        chrono.setForeground(new java.awt.Color(255, 0, 0));
        chrono.setText("30:00");

        padlock1.setBackground(new java.awt.Color(51, 51, 51));
        padlock1.setForeground(new java.awt.Color(255, 255, 255));
        padlock1.setBorder(null);
        padlock1.setBorderPainted(false);
        padlock1.setContentAreaFilled(false);
        padlock1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                padlock1ActionPerformed(evt);
            }
        });

        jButton1.setBorder(null);
        jButton1.setBorderPainted(false);
        jButton1.setContentAreaFilled(false);
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.setOpaque(true);

        padlock2.setForeground(new java.awt.Color(255, 255, 255));
        padlock2.setBorder(null);
        padlock2.setBorderPainted(false);
        padlock2.setContentAreaFilled(false);

        padlock3.setForeground(new java.awt.Color(255, 255, 255));
        padlock3.setBorder(null);
        padlock3.setBorderPainted(false);
        padlock3.setContentAreaFilled(false);

        padlock4.setForeground(new java.awt.Color(255, 255, 255));
        padlock4.setBorder(null);
        padlock4.setBorderPainted(false);
        padlock4.setContentAreaFilled(false);

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/room_1.jpg"))); // NOI18N
        background.setOpaque(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(510, 510, 510)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(background)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(padlock1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(padlock2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(padlock3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(padlock4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(370, 370, 370)
                .addComponent(chrono, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(150, 150, 150)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(background))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(padlock1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(padlock2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(padlock3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(padlock4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(chrono, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void padlock1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_padlock1ActionPerformed
        // TODO add your handling code here:
        System.err.println("Hola");
    }//GEN-LAST:event_padlock1ActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel background;
    private javax.swing.JLabel chrono;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton padlock1;
    private javax.swing.JButton padlock2;
    private javax.swing.JButton padlock3;
    private javax.swing.JButton padlock4;
    // End of variables declaration//GEN-END:variables

    private class Chrono extends Thread {

        private int minut;
        private int second;
        private boolean stop;

        public Chrono() {
            minut = 0;
            second = 0;
            stop = false;
        }

        @Override
        public String toString() {
            return minut + " : " + second + " s";
        }

        @Override
        public void run() {

            for (int i = 0; i < 1800 && !stop; i++) {
//                for (int i = 0; i < PropertiesConfig.getInstance().getProperties("timeLimit") && !stop; i++) {
                second++;
                if (second == 60) {
                    minut++;
                    second = 0;
                }
                chrono.setText(toString());
                try {
                    sleep(1000);
                } catch (InterruptedException ex) {
                    System.err.println(ex.getMessage());
                }
            }
            stop = true;
        }
    }
}
